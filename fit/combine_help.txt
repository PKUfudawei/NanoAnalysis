Usage: combine datacard [options]
Main options:
  -d [ --datacard ] arg                 Datacard file (can also be specified 
                                        directly without the -d or --datacard)
  -M [ --method ] arg (=AsymptoticLimits)
                                        Method to extract upper limit. 
                                        Supported methods are: 
                                        AsymptoticLimits, BayesianSimple, 
                                        BayesianToyMC, ChannelCompatibilityChec
                                        k, FeldmanCousins, FitDiagnostics, 
                                        GenerateOnly, GoodnessOfFit, HybridNew,
                                        MarkovChainMC, MultiDimFit, 
                                        Significance
  -v [ --verbose ] arg (=0)             Verbosity level (-1 = very quiet; 0 = 
                                        quiet, 1 = verbose, 2+ = debug)
  -h [ --help ]                         Produce help message

Common statistics options:
  -C [ --cl ] arg (=0.949999988)        Confidence Level
  --rMin arg                            Override minimum value for signal 
                                        strength (default is 0)
  --rMax arg                            Override maximum value for signal 
                                        strength (default is 20)
  --prior arg (=flat)                   Prior to use, for methods that require 
                                        it and if it's not already in the input
                                        file: 'flat' (default), '1/sqrt(r)', or
                                        a custom expression that uses @0 as the
                                        parameter of interest
  --significance                        Compute significance instead of upper 
                                        limit (works only for some methods)
  --lowerLimit                          Compute the lower limit instead of the 
                                        upper limit (works only for some 
                                        methods)
  --hintStatOnly                        Ignore systematics when computing the 
                                        hint
  --toysNoSystematics                   Generate all toys with the central 
                                        value of the nuisance parameters, 
                                        without fluctuating them
  --toysFrequentist                     Generate all toys in the frequentist 
                                        way. Note that this affects the toys 
                                        generated by option '-t' that happen in
                                        the main loop, not the ones within the 
                                        Hybrid(New) algorithm.
  --expectSignal arg (=0)               If set to non-zero, generate *signal* 
                                        toys instead of background ones, with 
                                        the specified signal strength.
  --expectSignalMass arg (=-99)         If set to non-zero, generate *signal* 
                                        toys instead of background ones, with 
                                        the specified mass.
  -U [ --unbinned ]                     Generate unbinned datasets instead of 
                                        binned ones (works only for extended 
                                        pdfs)
  --generateBinnedWorkaround            Make binned datasets generating 
                                        unbinned ones and then binnning them. 
                                        Workaround for a bug in RooFit.
  --setParameters arg                   Set the values of relevant physics 
                                        model parameters. Give a 
                                        comma-separated list of parameter value
                                        assignments. Example: CV=1.0,CF=1.0
  --setParameterRanges arg              Set the range of relevant physics model
                                        parameters. Give a colon-separated list
                                        of parameter ranges. Example: 
                                        CV=0.0,2.0:CF=0.0,5.0
  --defineBackgroundOnlyModelParameters arg
                                        If no background only (null) model is 
                                        explicitly provided in physics model, 
                                        one will be defined using these values 
                                        of the POIs (default is r=0)
  --redefineSignalPOIs arg              Redefines the POIs to be this 
                                        comma-separated list of variables from 
                                        the workspace.
  --freezeParameters arg                Set these parameters as constant. Use 
                                        --freezeParameters allConstrainedNuisan
                                        ces to freeze all constrained nuisance 
                                        parameters (i.e doesn't include 
                                        rateParams etc)
  --freezeNuisanceGroups arg            Set as constant all these groups of 
                                        nuisance parameters.
  --freezeWithAttributes arg            Set as constant all variables carrying 
                                        one of these attribute strings.
  -t [ --toys ] arg (=0)                Number of Toy MC extractions
  -s [ --seed ] arg (=123456)           Toy MC random seed
  -H [ --hintMethod ] arg               First run this method to provide a hint
                                        on the result

Common input-output options:
  --saveWorkspace                       Save workspace to output root file
  -w [ --workspaceName ] arg (=w)       Workspace name, when reading it from or
                                        writing it to a ROOT file.
  --snapshotName arg                    Default snapshot name for pre-fit 
                                        snapshot for reading or writing to 
                                        workspace
  --modelConfigName arg (=ModelConfig)  ModelConfig name, when reading it from 
                                        or writing it to a ROOT file.
  --modelConfigNameB arg (=%s_bonly)    Name of the ModelConfig for b-only 
                                        hypothesis.
                                        If not present, it will be made from 
                                        the singal model taking zero signal 
                                        strength.
                                        A '%s' in the name will be replaced 
                                        with the modelConfigName.
  --bypassFrequentistFit                Skip actual minimization for 
                                        constructing frequentist toys (eg 
                                        because loaded snapshot already 
                                        corresponds to desired postfit)
  --overrideSnapshotMass                Override MH loaded from a snapshot with
                                        the one passed on the command line
  -V [ --validateModel ]                Perform some sanity checks on the model
                                        and abort if they fail.
  --saveToys                            Save results of toy MC in output file
  --floatAllNuisances arg (=0)          Make all nuisance parameters floating
  --floatParameters arg                 Set these parameters floating(note 
                                        freeze will take priority over float), 
                                        also accepts regexp with syntax 
                                        'rgx{<my regexp>}' or 'var{<my 
                                        regexp>}'
  --freezeAllGlobalObs arg (=1)         Make all global observables constant
  -n [ --name ] arg (=Test)             Name of the job, affects the name of 
                                        the output tree
  -m [ --mass ] arg (=120)              Mass to store in the output tree
  -D [ --dataset ] arg (=data_obs)      Name of the dataset for observed limit 
                                        - use this to replace dataset in 
                                        workspace for example with a toy 
                                        dataset. Format as file:workspace:objec
                                        t or file:object
  --dataMapName arg (=data_obs)         Name of the dataset for observed limit 
                                        pattern in the datacard
  --toysFile arg                        Read toy mc or other intermediate 
                                        results from this file

Cascade Minimizer options:
  --cminPoiOnlyFit                      First do a fit floating only the 
                                        parameter of interest
  --cminPreScan                         Do a scan before first minimization
  --cminPreFit arg (=0)                 if set to a value N > 0, a pre-fit with
                                        strategy (N-1) will be performed with 
                                        the constrained nuisance parameters 
                                        frozen.
  --cminApproxPreFitTolerance arg (=0)  If nonzero, first do a pre-fit with 
                                        this tolerance (or 10 times the final 
                                        tolerance, whichever is largest)
  --cminApproxPreFitStrategy arg (=0)   Strategy to use in the pre-fit
  --cminSingleNuisFit                   First perform a minimization of each 
                                        nuisance parameter individually
  --cminFallbackAlgo arg                Fallback algorithms if the default 
                                        minimizer fails (can use multiple 
                                        ones). Syntax is algo[,subalgo][,strate
                                        gy][:tolerance]
  --cminSetZeroPoint arg (=1)           Change the reference point of the NLL 
                                        to be zero during minimization
  --cminOldRobustMinimize arg (=0)      Use the old 'robustMinimize' logic in 
                                        addition to the cascade (for debug 
                                        only)
  --cminInitialHesse arg (=0)           Call Hesse before the minimization
  --cminFinalHesse arg (=0)             Call Hesse after the minimization
  --cminDefaultMinimizerType arg (=Minuit2)
                                        Set the default minimizer Type
  --cminDefaultMinimizerAlgo arg (=Migrad)
                                        Set the default minimizer Algo
  --cminDefaultMinimizerTolerance arg (=0.10000000000000001)
                                        Set the default minimizer Tolerance
  --cminDefaultMinimizerPrecision arg (=-1)
                                        Set the default minimizer precision
  --cminDefaultMinimizerStrategy arg (=1)
                                        Set the default minimizer (initial) 
                                        strategy
  --cminRunAllDiscreteCombinations      Run all combinations for discrete 
                                        nuisances
  --cminDiscreteMinTol arg (=0.001)     Tolerance on min NLL for discrete 
                                        combination iterations
  --cminM2StorageLevel arg (=0)         Storage level for minuit2 (0 = don't 
                                        store intermediate covariances, 1 = 
                                        store them)

Common miscellaneous options:
  --optimizeSimPdf arg (=1)             Turn on special optimizations of 
                                        RooSimultaneous. On by default, you can
                                        turn it off if it doesn't work for your
                                        workspace.
  --noMCbonly arg (=0)                  Don't create a background-only 
                                        modelConfig
  --noDefaultPrior arg (=0)             Don't create a default uniform prior
  --rebuildSimPdf arg (=0)              Rebuild simultaneous pdf from scratch 
                                        to make sure constraints are correct 
                                        (not needed in CMS workspaces)
  --compile                             Compile expressions instead of 
                                        interpreting them
  --tempDir arg (=0)                    Run the program from a temporary 
                                        directory (automatically on for text 
                                        datacards or if 'compile' is activated)
  --guessGenMode                        Guess whether to generate binned or 
                                        unbinned based on dataset
  --genBinnedChannels arg               Flag the given channels to be generated
                                        binned (irrespectively of how they were
                                        flagged at workspace creation)
  --genUnbinnedChannels arg             Flag the given channels to be generated
                                        unbinned (irrespectively of how they 
                                        were flagged at workspace creation)
  --text2workspace arg                  Pass along options to text2workspace 
                                        (default = none)
  --trackParameters arg                 Keep track of parameters in workspace, 
                                        also accepts regexp with syntax 
                                        'rgx{<my regexp>}' (default = none)
  --trackErrors arg                     Keep track of errors on parameters in 
                                        workspace, also accepts regexp with 
                                        syntax 'rgx{<my regexp>}' (default = 
                                        none)
  --igpMem                              Setup support for memory profiling 
                                        using IgProf
  --perfCounters                        Dump performance counters at end of job
  -L [ --LoadLibrary ] arg              Load library through 
                                        gSystem->Load(...). Can specify 
                                        multiple libraries using this option 
                                        multiple times
  --keyword-value arg                   Set keyword values with 'WORD=VALUE', 
                                        will replace $WORD with VALUE in 
                                        datacards. Filename will also be 
                                        extended with 'WORDVALUE'. Can specify 
                                        multiple times
  --X-rtd arg                           Define some constants to be used at 
                                        runtime (for debugging purposes). The 
                                        syntax is --X-rtd identifier[=value], 
                                        where value is an integer and defaults 
                                        to 1. Can specify multiple times
  --X-fpeMask arg                       Set FPE mask: 1=NaN, 2=Div0, 4=Overfl, 
                                        8=Underf, 16=Inexact; 7=default
AsymptoticLimits specific options:
  --rAbsAcc arg (=0.00050000000000000001)
                                        Absolute accuracy on r to reach to 
                                        terminate the scan
  --rRelAcc arg (=0.0050000000000000001)
                                        Relative accuracy on r to reach to 
                                        terminate the scan
  --run arg (=both)                     What to run: both (default), observed, 
                                        expected, blind.
  --singlePoint arg                     Just compute CLs for the given value of
                                        r
  --qtilde arg (=1)                     Allow only non-negative signal 
                                        strengths (default is true).
  --rule arg (=CLs)                     Rule to use: CLs, Pmu
  --picky                               Abort on fit failures
  --noFitAsimov                         Use the pre-fit asimov dataset
  --getLimitFromGrid arg                Calculates the limit from a grid of 
                                        r,cls values
  --newExpected arg (=1)                Use the new formula for expected limits
                                        (default is true)
  --minosAlgo arg (=stepping)           Algorithm to use to get the median 
                                        expected limit: 'minos' (fastest), 
                                        'bisection', 'stepping' (default, most 
                                        robust)
  --strictBounds                        Take --rMax as a strict upper bound

BayesianSimple specific options:
  --maxDim arg (=4)     Maximum number of dimensions to try doing the 
                        integration

BayesianToyMC specific options:
  --integrationType arg (=toymc) Integration algorithm to use
  --tries arg (=1)               Number of times to run the ToyMC on the same 
                                 data
  -i [ --numIters ] arg (=1000)  Number of iterations or calls used within 
                                 iteration (0=ROOT Default)
  --hintSafetyFactor arg (=5)    Set range of integration equal to this number 
                                 of times the hinted limit
  --twoPoints arg                Compute BF comparing two points in parameter 
                                 space

ChannelCompatibilityCheck specific options:
  --preFitValue arg (=1)                Value of signal strength pre-fit, also 
                                        used for pre-fit plots, normalizations 
                                        and uncertainty calculations (note this
                                        overrides --expectSignal for these 
                                        features)
  --do95 arg (=0)                       Also compute 2-sigma interval from 
                                        delta(nll) = 1.92 instead of 0.5
  --robustFit arg (=0)                  Search manually for 1 and 2 sigma bands
                                        instead of using Minos
  --maxFailedSteps arg (=5)             How many failed steps to retry before 
                                        giving up
  --stepSize arg (=0.100000001)         Step size for robust fits (multiplier 
                                        of the range)
  --setRobustFitAlgo arg                Choice of minimizer (Minuit vs Minuit2)
                                        for profiling in robust fits
  --setRobustFitStrategy arg (=0)       Stragegy for minimizer for profiling in
                                        robust fits
  --setRobustFitTolerance arg (=0.100000001)
                                        Tolerance for minimizer for profiling 
                                        in robust fits
  --setCrossingTolerance arg (=9.99999975e-05)
                                        Tolerance for finding the NLL crossing 
                                        in robust fits
  --profilingMode arg (=all)            What to profile when computing 
                                        uncertainties: all, none (at least for 
                                        now).
  --saveNLL                             Save the negative log-likelihood at the
                                        minimum in the output tree (note: value
                                        is relative to the pre-fit state)
  --keepFailures                        Save the results even if the fit is 
                                        declared as failed (for NLL studies)
  --protectUnbinnedChannels             Protect PDF from going negative in 
                                        unbinned channels
  --autoBoundsPOIs arg                  Adjust bounds for these POIs if they 
                                        end up close to the boundary. Can be a 
                                        list of POIs, or "*" to get all
  --autoMaxPOIs arg                     Adjust maxima for these POIs if they 
                                        end up close to the boundary. Can be a 
                                        list of POIs, or "*" to get all
  --forceRecreateNLL                    Always recreate NLL when running on 
                                        multiple toys rather than re-using nll 
                                        with new dataset
  --fixedSignalStrength arg (=0)        Compute the compatibility for a fixed 
                                        signal strength. If not specified, it 
                                        is left floating
  --saveFitResult                       Save fit results in output file
  -g [ --group ] arg                    Group together channels that contain a 
                                        given name. Can be used multiple times.
                                        Optionally, set range as name=rMin,rMax
  --runMinos arg (=1)                   Also compute uncertainties using 
                                        profile likeilhood (MINOS or robust 
                                        variants of it)

FeldmanCousins specific options:
  --rAbsAcc arg (=0.100000001)  Absolute accuracy on r to reach to terminate 
                                the scan
  --rRelAcc arg (=0.0199999996) Relative accuracy on r to reach to terminate 
                                the scan
  --toysFactor arg (=1)         Increase the toys per point by this factor 
                                w.r.t. the minimum from adaptive sampling

FitDiagnostics specific options:
  --preFitValue arg (=1)                Value of signal strength pre-fit, also 
                                        used for pre-fit plots, normalizations 
                                        and uncertainty calculations (note this
                                        overrides --expectSignal for these 
                                        features)
  --do95 arg (=0)                       Also compute 2-sigma interval from 
                                        delta(nll) = 1.92 instead of 0.5
  --robustFit arg (=0)                  Search manually for 1 and 2 sigma bands
                                        instead of using Minos
  --maxFailedSteps arg (=5)             How many failed steps to retry before 
                                        giving up
  --stepSize arg (=0.100000001)         Step size for robust fits (multiplier 
                                        of the range)
  --setRobustFitAlgo arg                Choice of minimizer (Minuit vs Minuit2)
                                        for profiling in robust fits
  --setRobustFitStrategy arg (=0)       Stragegy for minimizer for profiling in
                                        robust fits
  --setRobustFitTolerance arg (=0.100000001)
                                        Tolerance for minimizer for profiling 
                                        in robust fits
  --setCrossingTolerance arg (=9.99999975e-05)
                                        Tolerance for finding the NLL crossing 
                                        in robust fits
  --profilingMode arg (=all)            What to profile when computing 
                                        uncertainties: all, none (at least for 
                                        now).
  --saveNLL                             Save the negative log-likelihood at the
                                        minimum in the output tree (note: value
                                        is relative to the pre-fit state)
  --keepFailures                        Save the results even if the fit is 
                                        declared as failed (for NLL studies)
  --protectUnbinnedChannels             Protect PDF from going negative in 
                                        unbinned channels
  --autoBoundsPOIs arg                  Adjust bounds for these POIs if they 
                                        end up close to the boundary. Can be a 
                                        list of POIs, or "*" to get all
  --autoMaxPOIs arg                     Adjust maxima for these POIs if they 
                                        end up close to the boundary. Can be a 
                                        list of POIs, or "*" to get all
  --forceRecreateNLL                    Always recreate NLL when running on 
                                        multiple toys rather than re-using nll 
                                        with new dataset
  --minos arg (=poi)                    Compute MINOS errors for: 'none', 
                                        'poi', 'all'
  --noErrors                            Don't compute uncertainties on the best
                                        fit value. Best if using toys (-t N) to
                                        evaluate distributions of results
  --out arg (=.)                        Directory to put the diagnostics output
                                        file in
  --plots                               Make pre/post-fit RooPlots of 1D 
                                        distributions of observables and fitted
                                        models
  --rebinFactor arg (=1)                Rebin by this factor before plotting 
                                        (does not affect fitting!)
  --signalPdfNames arg (=shapeSig*)     Names of signal pdfs in plots 
                                        (separated by ',')
  --backgroundPdfNames arg (=shapeBkg*) Names of background pdfs in plots 
                                        (separated by ',')
  --saveNormalizations                  Save post-fit normalizations RooArgSet 
                                        (single toy only)
  --savePredictionsPerToy               Save post-fit normalizations and shapes
                                        per toy
  --oldNormNames                        Name the normalizations as in the 
                                        workspace, and not as channel/process
  --saveShapes                          Save pre and post-fit distributions as 
                                        TH1 in fitDiagnostics.root
  --saveWithUncertainties               Save also pre/post-fit uncertainties on
                                        the shapes and normalizations (from 
                                        resampling the covariance matrix)
  --saveOverallShapes                   Save total shapes (and covariance if 
                                        used with --saveWithUncertainties), ie 
                                        will produce TH1 (TH2) merging bins 
                                        across all channels
  --numToysForShapes arg (=200)         Choose number of toys for re-sampling 
                                        of the covariance (for shapes with 
                                        uncertainties)
  --filterString arg                    Filter to search for when making 
                                        covariance and shapes
  --justFit                             Just do the S+B fit, don't do the 
                                        B-only one, don't save output file
  --robustHesse arg (=0)                Use a more robust calculation of the 
                                        hessian/covariance matrix
  --skipBOnlyFit                        Skip the B-only fit (do only the S+B 
                                        fit)
  --skipSBFit                           Skip the S+B fit (do only the B-only 
                                        fit)
  --initFromBonly                       Use the values of the nuisance 
                                        parameters from the background only fit
                                        as the starting point for the s+b fit. 
                                        Can help fit convergence
  --customStartingPoint                 Don't set the first POI to 0 for the 
                                        background-only fit. Instead if using 
                                        this option, the parameter will be 
                                        fixed to its default value, which can 
                                        be set with the --setParameters option.
  --ignoreCovWarning                    Override the default behaviour of 
                                        saveWithUncertainties being ignored if 
                                        the covariance matrix is not accurate.

GenerateOnly specific options: none:

GoodnessOfFit specific options:
  --algorithm arg                Goodness of fit algorithm. Supported 
                                 algorithms are 'saturated', 'KS' and 'AD'.
  --setParametersForFit arg      Set parameter values for the saturated model 
                                 fitting step
  --setParametersForEval arg     Set parameter values for the saturated model 
                                 NLL eval step
  --fixedSignalStrength arg (=0) Compute the goodness of fit for a fixed signal
                                 strength. If not specified, it is left 
                                 floating
  --plots                        Make plots containing information of the 
                                 computation of the Anderson-Darling or 
                                 Kolmogorov-Smirnov test statistic

HybridNew specific options:
  --rule arg (=CLs)                     Rule to use: CLs, Pmu
  --testStat arg (=LEP)                 Test statistic: LEP, TEV, LHC, Profile.
  --singlePoint arg (=1.0)              Just compute CLs for the given value of
                                        the parameter of interest. In case of 
                                        multiple parameters, use a syntax 
                                        'name=value,name2=value2,...'
  --onlyTestStat                        Just compute test statistic for the 
                                        data (or toy if using -t N), i.e don't 
                                        throw toys to calculate actual p-values
                                        (works only with --singlePoint)
  --generateNuisances arg (=1)          Generate nuisance parameters for each 
                                        toy
  --generateExternalMeasurements arg (=0)
                                        Generate external measurements for each
                                        toy, taken from the GlobalObservables 
                                        of the ModelConfig
  --fitNuisances arg (=0)               Fit the nuisance parameters first, 
                                        before generating the toy data. Set 
                                        this option to false to acheive the 
                                        same results as with 
                                        --bypassFrequentistFit. When not 
                                        generating toys, eg as in when running 
                                        with --readHybridresult, this has no 
                                        effect
  --searchAlgo arg (=logSecant)         Algorithm to use to search for the 
                                        limit (bisection, logSecant)
  -T [ --toysH ] arg (=500)             Number of Toy MC extractions to compute
                                        Pmu, Pb and CLs
  --clsAcc arg (=0.0050000000000000001) Absolute accuracy on CLs to reach to 
                                        terminate the scan
  --rAbsAcc arg (=0.10000000000000001)  Absolute accuracy on r to reach to 
                                        terminate the scan
  --rRelAcc arg (=0.050000000000000003) Relative accuracy on r to reach to 
                                        terminate the scan
  --interpAcc arg (=0.20000000000000001)
                                        Minimum uncertainty from interpolation 
                                        delta(x)/(max(x)-min(x))
  -i [ --iterations ] arg (=1)          Number of times to throw 'toysH' toys 
                                        to compute the p-values (for 
                                        --singlePoint if clsAcc is set to zero 
                                        disabling adaptive generation)
  --fork arg (=0)                       Fork to N processes before running the 
                                        toys (0 by default == no forking). Only
                                        use if you're an expert in combine!
  --nCPU arg (=0)                       Use N CPUs with PROOF Lite 
                                        (experimental!)
  --saveHybridResult                    Save result in the output file
  --readHybridResults                   Read and merge results from file 
                                        (requires option '--grid' or 
                                        '--toysFile')
  --grid arg                            Use the specified file containing a 
                                        grid of SamplingDistributions for the 
                                        limit (implies readHybridResults).
                                         For calculating CLs/pmu values with 
                                        --singlePoint or if calculating the 
                                        Signfiicance with LHCmode 
                                        LHC-significance ( or any option with 
                                        --signif) use '--toysFile=x.root 
                                        --readHybridResult' !
  --expectedFromGrid arg (=0.5)         Use the grid to compute the expected 
                                        limit for this quantile
  --signalForSignificance arg (=1)      Use this value of the parameter of 
                                        interest when generating signal toys 
                                        for expected significance (same syntax 
                                        as --singlePoint)
  --clsQuantiles arg (=1)               Compute correct quantiles of CLs or Pmu
                                        instead of assuming they're the same as
                                        those for Pb
  --optimizeTestStatistics arg (=1)     Use optimized test statistics if the 
                                        likelihood is not extended (works for 
                                        LEP and TEV test statistics).
  --optimizeProductPdf arg (=1)         Optimize the code factorizing pdfs
  --plot arg                            Save a plot of the result (test 
                                        statistics distributions or limit scan)
  --frequentist                         Shortcut to switch to Frequentist mode 
                                        (--generateNuisances=0 
                                        --generateExternalMeasurements=1 
                                        --fitNuisances=1)
  --newToyMCSampler arg (=1)            Use new ToyMC sampler with support for 
                                        mixed binned-unbinned generation. On by
                                        default, you can turn it off if it 
                                        doesn't work for your workspace.
  --fullGrid                            Evaluate p-values at all grid points, 
                                        without optimitations
  --saveGrid                            Save CLs or (or FC p-value) at all grid
                                        points in the output tree. The value of
                                        'r' is saved in the 'limit' branch, 
                                        while the CLs or p-value in the 
                                        'quantileExpected' branch and the 
                                        uncertainty on 'limitErr' (since 
                                        there's no quantileExpectedErr)
  --noUpdateGrid                        Do not update test statistics at grid 
                                        points
  --fullBToys                           Run as many B toys as S ones (default 
                                        is to run 1/4 of b-only toys)
  --pvalue                              Report p-value instead of significance 
                                        (when running with --significance)
  --adaptiveToys arg (=-1)              Throw fewer toys far from interesting 
                                        contours , --toysH scaled by scale when
                                        probability is far from any of CL_i = 
                                        {importanceContours} 
  --importantContours arg (=0.68,0.95)  Throw fewer toys far from interesting 
                                        contours , format : CL_1,CL_2,..CL_N 
                                        (--toysH scaled down when probability 
                                        is far from any of CL_i) 
  --maxProbability arg (=0.999000013)   when point is >  maxProbability 
                                        countour, don't bother throwing toys
  --confidenceTolerance arg (=0.200000003)
                                        Determine what 'far' means for 
                                        adatptiveToys. (relative in terms of 
                                        (1-cl))
  --LHCmode arg                         Shortcuts for LHC style running modes. 
                                        --LHCmode LHC-significance: 
                                        --generateNuisances=0 
                                        --generateExternalMeasurements=1 
                                        --fitNuisances=1 --testStat=LHC (Q_LHC,
                                        modified for discovery) --significance,
                                        --LHCmode LHC-limits: 
                                        --generateNuisances=0 
                                        --generateExternalMeasurements=1 
                                        --fitNuisances=1 --testStat=LHC (Q_LHC,
                                        modified for upper limits) --rule CLs, 
                                        --LHCmode LHC-feldman-cousins: 
                                        --generateNuisances=0 
                                        --generateExternalMeasurements=1 
                                        --fitNuisances=1 --testStat=PL 
                                        (Q_Profile, includes boundaries) --rule
                                        Pmu

Markov Chain MC specific options:
  -i [ --iteration ] arg (=10000)       Number of iterations
  --tries arg (=10)                     Number of times to run the MCMC on the 
                                        same data
  -b [ --burnInSteps ] arg (=200)       Burn in steps (absolute number)
  --burnInFraction arg (=0.25)          Burn in steps (fraction of total 
                                        accepted steps)
  --adaptiveBurnIn arg (=0)             Adaptively determine burn in steps 
                                        (experimental!).
  --proposal arg (=ortho)               Proposal function to use: 'fit', 
                                        'uniform', 'gaus', 'ortho' (also known 
                                        as 'test')
  --runMinos                            Run MINOS when fitting the data
  --noReset                             Don't reset variable state after fit
  --updateHint                          Update hint with the results
  --updateProposalParams arg (=0)       Control ProposalHelper::SetUpdatePropos
                                        alParameters
  --propHelperWidthRangeDivisor arg (=5)
                                        Sets the fractional size of the 
                                        gaussians in the proposal
  --alwaysStepPOI arg (=1)              When using 'ortho' proposal, always 
                                        step also the parameter of interest. On
                                        by default, as it improves convergence,
                                        but you can turn it off (e.g. if you 
                                        turn off --optimizeSimPdf)
  --propHelperUniformFraction arg (=0)  Add a fraction of uniform proposals to 
                                        the algorithm
  --debugProposal arg (=0)              Printout the first N proposals
  --cropNSigmas arg (=0)                crop range of all parameters to N times
                                        their uncertainty
  --truncatedMeanFraction arg (=0)      Discard this fraction of the results 
                                        before computing the mean and rms
  --adaptiveTruncation arg (=1)         When averaging multiple runs, ignore 
                                        results that are more far away from the
                                        median than the inter-quartile range
  --hintSafetyFactor arg (=5)           set range of integration equal to this 
                                        number of times the hinted limit
  --saveChain                           Save MarkovChain to output file
  --noSlimChain                         Include also nuisance parameters in the
                                        chain that is saved to file
  --mergeChains                         Merge MarkovChains instead of averaging
                                        limits
  --readChains                          Just read MarkovChains from toysFile 
                                        instead of running MCMC directly
  --discreteModelPoints arg             Define multiple points in a subset of 
                                        the POI space among which to step 
                                        discretely (works only with ortho and 
                                        test proposals)

MultiDimFit specific options:
  --preFitValue arg (=1)                Value of signal strength pre-fit, also 
                                        used for pre-fit plots, normalizations 
                                        and uncertainty calculations (note this
                                        overrides --expectSignal for these 
                                        features)
  --do95 arg (=0)                       Also compute 2-sigma interval from 
                                        delta(nll) = 1.92 instead of 0.5
  --robustFit arg (=0)                  Search manually for 1 and 2 sigma bands
                                        instead of using Minos
  --maxFailedSteps arg (=5)             How many failed steps to retry before 
                                        giving up
  --stepSize arg (=0.100000001)         Step size for robust fits (multiplier 
                                        of the range)
  --setRobustFitAlgo arg                Choice of minimizer (Minuit vs Minuit2)
                                        for profiling in robust fits
  --setRobustFitStrategy arg (=0)       Stragegy for minimizer for profiling in
                                        robust fits
  --setRobustFitTolerance arg (=0.100000001)
                                        Tolerance for minimizer for profiling 
                                        in robust fits
  --setCrossingTolerance arg (=9.99999975e-05)
                                        Tolerance for finding the NLL crossing 
                                        in robust fits
  --profilingMode arg (=all)            What to profile when computing 
                                        uncertainties: all, none (at least for 
                                        now).
  --saveNLL                             Save the negative log-likelihood at the
                                        minimum in the output tree (note: value
                                        is relative to the pre-fit state)
  --keepFailures                        Save the results even if the fit is 
                                        declared as failed (for NLL studies)
  --protectUnbinnedChannels             Protect PDF from going negative in 
                                        unbinned channels
  --autoBoundsPOIs arg                  Adjust bounds for these POIs if they 
                                        end up close to the boundary. Can be a 
                                        list of POIs, or "*" to get all
  --autoMaxPOIs arg                     Adjust maxima for these POIs if they 
                                        end up close to the boundary. Can be a 
                                        list of POIs, or "*" to get all
  --forceRecreateNLL                    Always recreate NLL when running on 
                                        multiple toys rather than re-using nll 
                                        with new dataset
  --algo arg (=none)                    Algorithm to compute uncertainties
  -P [ --parameters ] arg               Parameters to fit/scan (default = all 
                                        parameters of interest)
  --floatOtherPOIs arg (=0)             POIs other than the selected ones will 
                                        be kept freely floating (1) or fixed 
                                        (0, default)
  --squareDistPoiStep                   POI step size based on distance from 
                                        midpoint (max-min)/2 rather than linear
  --skipInitialFit                      Skip initial fit (save time if snapshot
                                        is loaded from previous fit)
  --points arg (=50)                    Points to use for grid or contour scans
  --gridPoints arg                      Comma separated list of points per POI 
                                        for multidimensional grid scans. When 
                                        set, --points is ignored.
  --firstPoint arg (=0)                 First point to use
  --lastPoint arg (=4294967295)         Last point to use
  --autoRange arg (=-1)                 Set to any X >= 0 to do the scan in the
                                        +/- X sigma range (where the sigma is 
                                        from the initial fit, so it may be 
                                        fairly approximate)
  --fixedPointPOIs arg                  Parameter space point for --algo=fixed
  --centeredRange arg (=-1)             Set to any X >= 0 to do the scan in the
                                        +/- X range centered on the nominal 
                                        value
  --fastScan                            Do a fast scan, evaluating the 
                                        likelihood without profiling it.
  --maxDeltaNLLForProf arg (=200)       Last point to use
  --saveSpecifiedNuis arg               Save specified parameters (default = 
                                        none)
  --saveSpecifiedFunc arg               Save specified function values (default
                                        = none)
  --saveSpecifiedIndex arg              Save specified indexes/discretes 
                                        (default = none)
  --saveInactivePOI arg (=0)            Save inactive POIs in output (1) or not
                                        (0, default)
  --skipDefaultStart arg (=0)           Do not include the default start point 
                                        in list of points to fit
  --startFromPreFit arg (=0)            Start each point of the likelihood scan
                                        from the pre-fit values
  --alignEdges arg (=0)                 Align the grid points such that the 
                                        endpoints of the ranges are included
  --setParametersForGrid arg            Set the values of relevant physics 
                                        model parameters. Give a comma 
                                        separated list of parameter value 
                                        assignments. Example: CV=1.0,CF=1.0
  --saveFitResult                       Save RooFitResult to multidimfit.root
  --out arg (=.)                        Directory to put the diagnostics output
                                        file in
  --robustHesse arg (=0)                Use a more robust calculation of the 
                                        hessian/covariance matrix
  --robustHesseLoad arg                 Load the pre-calculated Hessian
  --robustHesseSave arg                 Save the calculated Hessian
  --pointsRandProf arg (=0)             Number of random start points to try 
                                        for the profiled POIs
  --randPointsSeed arg (=0)             Seed to use when generating random 
                                        start points to try for the profiled 
                                        POIs
  --setParameterRandomInitialValueRanges arg
                                        Range from which to draw random start 
                                        points for the profiled POIs. This 
                                        range should be equal to or smaller 
                                        than the max and min values for the 
                                        profiled POIs. Does not override 
                                        max/min ranges for the given POIs. E.g.
                                        usage: c1=-5,5:c2=-1,1

Significance specific options:
  --tries arg (=1)                      Compute PL limit N times, to check for 
                                        numerical instabilities
  --maxTries arg (=1)                   Stop trying after N attempts per point
  --maxRelDeviation arg (=0.25)         Max absolute deviation of the results 
                                        from the median
  --maxOutlierFraction arg (=0.25)      Ignore up to this fraction of results 
                                        if they're too far from the median
  --signalForSignificance arg (=0)      Signal strength used when computing 
                                        significances (default is zero, just 
                                        background)
  --maxOutliers arg (=3)                Stop trying after finding N outliers
  --plot arg                            Save a plot of the negative log of the 
                                        profiled likelihood into the specified 
                                        file
  --pvalue                              Report p-value instead of significance
  --uncapped arg (=0)                   Report uncapped significances or 
                                        p-value (i.e. negative in case of 
                                        deficits)
  --preFit                              Attempt a fit before running the 
                                        ProfileLikelihoodCalculator
  --usePLC                              Compute PL limit using the 
                                        ProfileLikelihoodCalculator (not 
                                        default)
  --useMinos                            Compute PL limit using Minos directly, 
                                        bypassing the ProfileLikelihoodCalculat
                                        or (default)
  --bruteForce                          Compute PL limit by brute force, 
                                        bypassing the ProfileLikelihoodCalculat
                                        or and Minos
  --setBruteForceAlgo arg (=scale)      NLL scan algorithm used for 
                                        --bruteForce. Supported values are 
                                        'scale' (default), 'stepUp[Twice]', 
                                        'stepDown[Twice]'
  --scanPoints arg (=20)                Points for the scan
  --setBruteForceTypeAndAlgo arg (=Minuit2,simplex)
                                        Choice of minimizer for brute-force 
                                        search (default is Minuit2,simplex)
  --setBruteForceTolerance arg (=9.99999975e-05)
                                        Tolerance for minimizer when doing 
                                        brute-force search

